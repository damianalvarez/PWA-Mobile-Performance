{"version":3,"sources":["components/Game/Cell/index.js","components/Game/boardLogic.js","components/Game/index.js","components/App.js","serviceWorker.js","index.js"],"names":["Cell","_this","this","react_default","a","createElement","onClick","props","storeCell","position","className","live","Component","Board","liveCells","arguments","length","undefined","Map","Object","classCallCheck","getLiveCells","addCell","set","x","y","removeCell","delete","isCellAlive","has","addBoard","forEach","item","calculateLiveCellsNeighbors","deadCells","calculateDeadCellsNeighbors","nextBoard","liveNeighbors","i","j","Game","possibleConstructorReturn","getPrototypeOf","call","handleRowChange","event","state","gameRunning","setState","rows","target","value","handleColumnChange","columns","renderBoard","newBoard","cellRow","board","push","Game_Cell","key","bind","assertThisInitialized","handleStart","intervalRef","setInterval","runGame","interval","handleStop","clearInterval","Fragment","type","onChange","App","components_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","lib_default","src_components_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.639d9349.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './cell.css'\n\nclass Cell extends Component {\n  render() {\n    return (\n      <div\n        onClick={() => this.props.storeCell(this.props.position)}\n        className={this.props.live ? 'cellContainerLive' : 'cellContainerDead'}\n      />\n    )\n  }\n}\n\nexport default Cell\n","export default class Board {\n  constructor(liveCells = new Map()) {\n    this.liveCells = liveCells\n    this.nextBoard = new Map()\n    this.deadCells = new Map()\n  }\n\n  getLiveCells = () => {\n    // Return live cells in each Board.\n    return this.liveCells\n  }\n\n  addCell = position => {\n    // Take the cell position and add it to liveCells.\n    this.liveCells.set(position.x + ' , ' + position.y, {\n      x: position.x,\n      y: position.y\n    })\n  }\n\n  removeCell = position => {\n    // Delete a cell in liveCells using the position.\n    this.liveCells.delete(position)\n  }\n\n  isCellAlive = position => {\n    // Allow to know if a cell is alive or not.\n    return this.liveCells.has(position)\n  }\n\n  storeCell = position => {\n    // Use the position in each cell behaviour, that allow the user to set the initial state of the cell and the board.\n    if (this.isCellAlive(position.x + ' , ' + position.y)) {\n      this.removeCell(position.x + ' , ' + position.y)\n    } else {\n      this.addCell(position)\n    }\n    return new Board(this.liveCells)\n  }\n\n  addBoard = () => {\n    // In each board, this function calculates the new live and dead cells and, so, the new board.\n    this.liveCells.forEach(item => {\n      this.calculateLiveCellsNeighbors(item)\n    })\n    this.deadCells.forEach(item => {\n      this.calculateDeadCellsNeighbors(item)\n    })\n    return new Board(this.nextBoard)\n  }\n\n  calculateLiveCellsNeighbors = position => {\n    // With the position, It calculates the live cells for the new board and also take into account the neighbors of each live cell.\n    var liveNeighbors = 0 //This is because initialy we don't know how many live neighbors are there\n    //Here we are going to check the state of all the cells neighbors. This will alow us to apply the rules\n    for (var i = position.x - 1; i <= position.x + 1; i++) {\n      for (var j = position.y - 1; j <= position.y + 1; j++) {\n        //This is to make sure that we don't check if the cell we are currently analysing is counted has a live cell\n        if (i === position.x && j === position.y) continue\n        //if the neighboor is alive we add to the liveNeighbors counter else it goes to the deadCell Map we defined in the constructor\n        if (this.isCellAlive(i + ' , ' + j)) {\n          liveNeighbors++\n        } else {\n          this.deadCells.set(i + ' , ' + j, { x: i, y: j })\n        }\n      }\n    }\n    //Here we are applying the rules of the game. 2 or 3 live neighbors means that the cell remains alive and lives on to the next board.\n    if (liveNeighbors === 2 || liveNeighbors === 3)\n      this.nextBoard.set(position.x + ' , ' + position.y, {\n        x: position.x,\n        y: position.y\n      })\n  }\n\n  calculateDeadCellsNeighbors = position => {\n    // With the position, It calculates the dead cells for the new board that will be 'live' or 'dead' in the next board.\n    var liveNeighbors = 0\n    for (var i = position.x - 1; i <= position.x + 1; i++) {\n      for (var j = position.y - 1; j <= position.y + 1; j++) {\n        if (i === position.x && j === position.y) continue\n\n        if (this.isCellAlive(i + ' , ' + j)) {\n          liveNeighbors++\n        }\n      }\n    }\n    //Applying the game rule that says when a dead cell has 3 neighboors it's reborn.\n    if (liveNeighbors === 3)\n      this.nextBoard.set(position.x + ' , ' + position.y, {\n        x: position.x,\n        y: position.y\n      })\n  }\n}\n","import React, { Component } from 'react'\nimport Cell from './Cell'\nimport Board from './boardLogic'\nimport './game.css'\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      columns: 5,\n      rows: 5,\n      gameRunning: false,\n      interval: 100,\n      board: new Board()\n    }\n  }\n\n  handleRowChange = event => {\n    if (!this.state.gameRunning) {\n      this.setState({\n        rows: event.target.value\n      })\n    }\n  }\n\n  handleColumnChange = event => {\n    if (!this.state.gameRunning) {\n      this.setState({\n        columns: event.target.value\n      })\n    }\n  }\n\n  renderBoard = () => {\n    var newBoard = []\n    var cellRow = []\n    for (var i = 0; i < this.state.rows; i++) {\n      for (var j = 0; j < this.state.columns; j++) {\n        if (this.state.board.isCellAlive(i + ' , ' + j)) {\n          cellRow.push(\n            <Cell\n              key={[i, j]}\n              position={{ x: i, y: j }}\n              live={true}\n              storeCell={this.storeCell.bind(this)}\n            />\n          )\n        } else {\n          cellRow.push(\n            <Cell\n              key={[i, j]}\n              position={{ x: i, y: j }}\n              live={false}\n              storeCell={this.storeCell.bind(this)}\n            />\n          )\n        }\n      }\n      newBoard.push(\n        <div className=\"row\" key={i}>\n          {cellRow}\n        </div>\n      )\n      cellRow = []\n    }\n    return newBoard\n  }\n\n  handleStart = () => {\n    if (!this.state.gameRunning) {\n      this.setState(\n        {\n          gameRunning: true\n        },\n        () => {\n          this.intervalRef = setInterval(\n            () => this.runGame(),\n            this.state.interval\n          )\n        }\n      )\n    }\n  }\n\n  handleStop = () => {\n    this.setState(\n      {\n        gameRunning: false\n      },\n      () => {\n        if (this.intervalRef) {\n          clearInterval(this.intervalRef)\n        }\n      }\n    )\n  }\n\n  runGame = () => {\n    this.setState({\n      board: this.state.board.addBoard()\n    })\n  }\n\n  storeCell = position => {\n    if (!this.state.gameRunning) {\n      this.setState({\n        board: this.state.board.storeCell(position)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"inputs-container\">\n          <label className=\"label\">\n            Rows:\n            <input\n              className=\"input\"\n              type=\"text\"\n              value={this.state.rows}\n              onChange={this.handleRowChange}\n            />\n          </label>\n          <label className=\"label\">\n            Columns:\n            <input\n              className=\"input\"\n              type=\"text\"\n              value={this.state.columns}\n              onChange={this.handleColumnChange}\n            />\n          </label>\n        </div>\n        <div className=\"buttons-container\">\n          <button className=\"button\" type=\"button\" onClick={this.handleStart}>\n            Start\n          </button>\n          <button className=\"button\" type=\"button\" onClick={this.handleStop}>\n            Stop\n          </button>\n        </div>\n        <div className=\"board\">{this.renderBoard()}</div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Game\n","import React, { Component } from 'react'\nimport Game from './Game'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Conways Game of Life - PWA</h1>\n        <Game />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport HttpsRedirect from 'react-https-redirect'\n\nReactDOM.render(\n  <HttpsRedirect>\n    <App />\n  </HttpsRedirect>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}