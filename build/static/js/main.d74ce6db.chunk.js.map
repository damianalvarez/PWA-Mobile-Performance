{"version":3,"sources":["components/game/board/cell/index.js","components/game/board/index.js","components/game/index.js","components/App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","active","state","setState","react_default","a","createElement","className","onClick","Component","UlBoard","styled","ul","_templateObject","height","width","Board","showCells","columnsRows","list","i","push","map","item","index","cell","key","number","style","Game","handleChange","e","target","value","console","log","Fragment","board","type","onChange","App","game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","lib_default","components_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d74ce6db.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Cell.css'\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      active: false\n    }\n  }\n\n  handleClick = () => {\n    const { active } = this.state\n    this.setState({ active: !active })\n  }\n\n  render() {\n    const { active } = this.state\n    return (\n      <li\n        className={active ? 'activeCell' : 'cell'}\n        onClick={this.handleClick}\n      />\n    )\n  }\n}\n\nexport default Cell\n","import React, { Component } from 'react'\nimport Cell from './cell'\nimport styled from 'styled-components'\n\nconst UlBoard = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  background-color: #ccc;\n  border-style: solid;\n  border-width: 2px;\n  border-color: #999;\n  height: ${props => props.height};\n  width: ${props => props.width};\n`\nclass Board extends Component {\n  showCells = () => {\n    const { columnsRows } = this.props\n    let list = []\n    for (let i = 0; i < columnsRows * columnsRows; i++) {\n      list.push(i)\n    }\n\n    return list.map((item, index) => {\n      return <Cell key={index} number={item} />\n    })\n  }\n  render() {\n    const height = this.props.style.height + 'px'\n    const width = this.props.style.width + 'px'\n    return (\n      <UlBoard height={height} width={width}>\n        {this.showCells()}\n      </UlBoard>\n    )\n  }\n}\n\nexport default Board\n","import React, { Component } from 'react'\nimport Board from './board'\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      columnsRows: 0,\n      style: {\n        height: 0,\n        width: 0\n      }\n    }\n  }\n  handleChange = e => {\n    this.setState({\n      columnsRows: e.target.value,\n      style: {\n        height: e.target.value * 26,\n        width: e.target.value * 26\n      }\n    })\n  }\n  handleClick = () => {\n    console.log('Do something')\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Board columnsRows={this.state.columnsRows} style={this.state.style} />\n        <div>\n          <button onClick={this.handleClick} className=\"play\">\n            Play\n          </button>\n        </div>\n        <div>\n          <input type=\"number\" onChange={this.handleChange} />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Game\n","import React from 'react'\nimport Game from './game'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Performance Mobile</h1>\n      <h2>Progressive Web App</h2>\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\nimport HttpsRedirect from 'react-https-redirect'\n\nReactDOM.render(\n  <HttpsRedirect>\n    <App />\n  </HttpsRedirect>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}